{
    "defaultPageId": "1",
    "openByDefault": ["1"],
    "pages": [
        {
            "id": "1",
            "ordinal": 1,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 1: Learn and Play",
                        "description": "<p>Welcome to your very first activity!</p><p>Before we dive into creating anything, let's take a moment to explore how the game works. In this step, you will play <span class=\"logo\">the Legend of Royal Institution</span> (a maze game) and observe how it behaves.</p><p>Put on your game designer hat and figure out how the game works. The following questions will help you to start:</p><ul><li>What are the rules of the maze?</li><li>How does the player move through it?</li><li>What marks the end of the game?</li></ul><p>Use the <strong>text boxes below</strong> to jot down any rules, patterns, or interesting game mechanics you notice.</p><p>As you explore the game, start thinking about how you could make it more interesting or challenging. What new <strong>game mechanics</strong> could you add? Think about how these elements could change the way the game is played and how they might make it more fun or challenging.</p><p>P.S.: There are no wrong answers! This is all about being curious and observant.</p>"
                    }
                },
                {
                    "id": "id.label.rules",
                    "type": "label",
                    "data": {
                        "title": "Observed mechanics:",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.sandbox.rules",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "temp.rules",
                        "placeholder": "Here are a few ideas for the game rules:\nThe character moves when user clicks a button\nGame starts with a dialog\n…",
                        "minLinesCount": 5
                    }
                },
                {
                    "id": "id.label.features",
                    "type": "label",
                    "data": {
                        "title": "Further improvements:",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.sandbox.features",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "temp.features",
                        "placeholder": "Spawn the character randomly at some pre-defined start point\n…",
                        "minLinesCount": 5
                    }
                }
            ],
            "asset": "playthrough_demo.json",
            "shouldOpen": ["2"]
        },
        {
            "id": "2",
            "ordinal": 2,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 2: Kicking off the plot!",
                        "description": "<p>Great job exploring the game. In this activity, you're stepping into the role of a <span class=\"highlight\">narrative designer</span>.</p> <p>You'll get a chance to change the <strong>dialogues</strong> that appear in important moments of the game:</p><ul><li><strong>Game Intro</strong>: the message players see before the gameplay begins. This message should help to justify the gameplay.</li><li><strong>Game Over</strong>: a message that is shown when the player fails to complete a level.</li><li><strong>Victory</strong>: the celebratory message when the player finishes the maze.</li></ul><p>Take a few moments to play the maze game again and pay close attention to the text that appears during these scenarios. Then, think about how you would change.</p><p>Do you want to make it more dramatic, silly, mysterious, or even motivational? Use the <strong>text boxes below</strong> to rewrite each of the three dialogues in your own style. Be creative and have fun with it!</p>"
                    }
                },
                {
                    "id": "id.label.intro",
                    "type": "label",
                    "data": {
                        "title": "\"Game Intro\" message:",
                        "description": "Tip: 2-3 words per line, max 7 lines.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.intro",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "dialog.intro",
                        "placeholder": "I am a template message,\nI am required to setup the gameplay",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.gameOver",
                    "type": "label",
                    "data": {
                        "title": "[Optional] \"Game Over\" message:",
                        "description": "Tip: 2-3 words per line, max 7 lines.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.gameOver",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "dialog.game-over",
                        "placeholder": "That is all folks!",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.victory",
                    "type": "label",
                    "data": {
                        "title": "[Optional] \"Victory\" message:",
                        "description": "Tip: 2-3 words per line, max 7 lines.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.victory",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "dialog.victory",
                        "placeholder": "Congratulations!\nWell done.",
                        "minLinesCount": 3
                    }
                }
            ],
            "shouldOpen": ["3"]
        },
        {
            "id": "3",
            "ordinal": 3,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 3: Designing your first level layout",
                        "description": "<p>Time to put your level design skills to work.</p><p>In this exercise, you'll be designing your very first custom maze layout.</p><p>Your maze should be <strong>20 tiles wide</strong> and <strong>14 tiles high</strong>, but don't worry if it is bigger or smaller than <strong>20x14</strong> the layout will be expanded or cropped depending respectively.</p><p>You should use the next symbols to build a successful layout:<ul><li><code>W0</code> to represent walls</li><li><code>.</code> (a dot) to represent empty spaces that the player can walk through.</li><li><code>SP</code> starting point. You can place a few of them around the maze, then one will be randomly chosen.</li><li><code>F0</code> for the finish point. You can also have a few of them in your layout the same as <code>SP</code>.</li></ul></p><p>Focus on building a clear, playable layout. Think about where the player might start, where they could go, and how the maze flows.</p><p>Treat it like the skeleton of your level!</p><p>P.S.: If your game is stuck at some point, just refresh the page. Don't worry all saved data will be restored.</p>"
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "initialValue": "SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  \n.  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  F0 ",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["4"]
        },
        {
            "id": "4",
            "ordinal": 4,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 4: Improving the visual appearance",
                        "description": "<p>Now that your level structure is in place, it's time to enhance its visual appearance using custom tile mapping.</p><p>In this exercise, you'll define how each tile should look by providing a list of <strong>tile IDs</strong> (ordinal values) that will be mapped to specific tile types in your maze.</p><p>Each tile ID you enter will be automatically assigned to a corresponding tile code: the first value becomes <code>W0</code>, the second <code>W1</code>, and so on—up to <code>WN</code>, where <strong>N</strong> is the index of the last value you provide.</p><p>Enter your tile IDs in the text box below, separated by commas (e.g., <code>17, 21, 34, 56</code>). These values will control how each wall tile appears in the final rendered game.</p><p>You can be creative here! Think of these tile IDs as different styles or textures: cracked stone, mossy brick, or a broken piece of wall. Just be sure to keep the order consistent with how you'll use <code>W0</code>, <code>W1</code>, etc., in your maze layout.</p><p>Below is an image to help you identify tiles in your game.</p><img src=\"@public/tiles-examples-walls.png\" width=\"500\"></img>"
                    }
                },
                {
                    "id": "id.label.walls",
                    "type": "label",
                    "data": {
                        "title": "Wall tile IDs:",
                        "description": "Tip: comma-separated list of numbers.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.walls",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.walls",
                        "placeholder": "340, 212, 343",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["5"]
        },
        {
            "id": "5",
            "ordinal": 5,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 5: Adding coins",
                        "description": "<p>Now it's time to populate the maze with collectible <strong>coins</strong> to make gameplay more rewarding.</p><p>In this exercise, you'll define the coin tiles that players can collect by providing a list of <strong>tile IDs</strong> (ordinal values) and optionally assigning them different scores. Each coin tile ID will be mapped to a code starting from <code>C0</code>, <code>C1</code>, and so on—up to <code>CN</code>, where <strong>N</strong> is the index of the last coin you define (similar to what you already achieved with the walls config).</p><p>There are three parts to this setup:</p><ol><li><strong>Default Coin Score</strong>: a positive number that is used as the score for any coin tile that doesn't have a custom score assigned.</li> <li><strong>Scores List</strong>: a list of specific scores assigned to every coin. Each line should be in the format <code>X Y</code>, where <code>X</code> is the coin code (a number in <code>C0</code>, <code>C1</code>, ... <code>CN</code>), and <code>Y</code> is the score. Example: <pre>0 5</pre><pre>2 10</pre></li><li><strong>Coin Tile IDs list</strong> a list of tile IDs (e.g., <code>12, 23, 45</code>) that will be used for coins. These values correspond to the tiles shown in the image below and will be mapped to <code>C0</code>, <code>C1</code>, etc.</li></ol><p>Once you've defined your coins and scores, you'll be able to place them directly into your maze layout using the <code>CX</code> codes.</p><p>Below is an image to help you select the coin tile IDs:</p><img src=\"@public/tiles-examples-gems.png\" width=\"500\" /><p>Add your coins using the fields below, and then update your maze layout accordingly. Have fun designing your collectible paths!</p>"
                    }
                },
                {
                    "id": "id.label.coins.default-score",
                    "type": "label",
                    "data": {
                        "title": "[Optional] Default score:",
                        "description": "Tip: a single positive number.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.coins.default-score",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "config.coins.default-score",
                        "placeholder": "50",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.coins.values",
                    "type": "label",
                    "data": {
                        "title": "[Optional] Values:",
                        "description": "Tip: a list of pairs separated by a new line. Every pair consists of coin id and score separated by space.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.coins.values",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "config.coins.values",
                        "placeholder": "0 10\n1 20\n…",
                        "minLinesCount": 10
                    }
                },
                {
                    "id": "id.label.coins.tiles",
                    "type": "label",
                    "data": {
                        "title": "Coin tile IDs:",
                        "description": "Tip: comma-separated list of numbers.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.coins.tiles",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.coins.tiles",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["6"]
        },
        {
            "id": "6",
            "ordinal": 6,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 6: Dynamic maze layout",
                        "description": "<p>Now let's turn around our core game mechanic: make the layout dynamic by introducing <strong class=\"highlight\">keys and doors</strong>. This feature adds challenge and progression to your level by requiring players to collect specific keys to unlock matching doors.</p><p>In this exercise, you'll define which tile IDs represent <strong>keys</strong>, <strong>doors</strong>, and optionally, the <strong>closed versions of doors</strong>. Each key and door pair will be mapped with a unique code: <code>K0</code>/<code>D0</code>, <code>K1</code>/<code>D1</code>, and so on.</p> <p>Here's how to set it up:</p><ol><li><strong>Keys</strong>: enter the tile IDs for all the keys in your level (e.g., <code>14, 33, 47</code>). Similar to what we worked with before: the first ID becomes <code>K0</code>, the second <code>K1</code>, and so on.</li><li><strong>Doors</strong>: the corresponding tile IDs for doors (e.g., <code>28, 39, 52</code>). These will be assigned as <code>D0</code>, <code>D1</code>, etc. There must be exactly one door tile per key tile.</li> <li><strong>Open Door Tile IDs</strong>: a list of tiles to use for unblocked doors. Character can travel through the open doors. If you only provide one value, all doors will use <strong>that tile</strong>. If you provide more than one, the number of open door tiles <strong>must exactly match the number of doors (aka closed doors)</strong> and be listed in the same order.</li></ol><p>Once you've defined your keys and doors, you can use <code>K0</code>, <code>K1</code>, ... and <code>D0</code>, <code>D1</code>, ... directly in your maze layout to place them where needed.</p><p>These images will help you identify the correct tile IDs for keys and doors:</p><p><strong>Key Tile IDs</strong>:</p><img src=\"@public/tiles-examples-keys.png\" width=\"500\" /><p><strong>Door Tile IDs</strong>:</p> <img src=\"@public/tiles-examples-doors.png\" width=\"500\" /><p>This will make your maze more interactive and strategic!</p>"
                    }
                },
                {
                    "id": "id.label.keys",
                    "type": "label",
                    "data": {
                        "title": "Key tile IDs:",
                        "description": "Tip: comma-separated list of numbers.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.keys",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.keys",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.doors.close",
                    "type": "label",
                    "data": {
                        "title": "Close door tile IDs:",
                        "description": "Tip: comma-separated list of numbers.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.doors.close",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.doors.close",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.doors.open",
                    "type": "label",
                    "data": {
                        "title": "Open door tile IDs:",
                        "description": "Tip: a single number or comma-separated list of numbers.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.doors.open",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.doors.open",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["7"]
        },
        {
            "id": "7",
            "ordinal": 7,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 7: Adding monsters 👿",
                        "description": "<p>It's time to bring your level to life with some <strong>monster logic</strong>! In this exercise, you'll define how monsters behave by specifying their spawn points, movement patterns, and update timing.</p><p>You'll provide your monster configurations using a text field below. Each line represents one monster and follows this exact format:</p><pre>tileID updateTimeMs direction1 direction2 ... directionN</pre><p>Here's what each part means:</p><ul><li><li><strong>tileID</strong>: the tile ID used to visually represent the monster.</li><li><strong>updateTimeMs</strong>: the time (in milliseconds) between each movement of your creature. For example, <code>500</code> means the monster updates its position twice in a second (every half a second).</li><li><strong>directions</strong> a sequence of movement directions the monster will follow in order. Valid directions are: <code>left</code>, <code>right</code>, <code>up</code>, <code>down</code>.<strong>Directions list should move the monster in a way that it starts and finishes in the exactly same point.</strong></li></ul><p>The first monster becomes <code>M0</code>, the second <code>M1</code>, and so on.</p> <p>See an example:</p> <pre>27 1000 right down down up up left<br>33 500 left left right right</pre><p>In this example: <ul><li><code>M0</code> uses tile ID 27, updates every 1000ms, and moves in a knight (chess figure) pattern.</li><li><code>M1</code> uses tile ID 33, updates every 500ms, and moves two steps left and then back right, repeating that pattern.</li></ul></p> <p>Once defined, you can place monsters in your maze using <code>M0</code>, <code>M1</code>, etc., just like other entities.</p> <p>This logic lets you create patrol patterns, chase paths, or timed threats. Get creative with how you design their movement!</p><p>Below is the image of monster tiles:</p><img src=\"@public/tiles-examples-creatures.png\" width=\"600\"></img>"
                    }
                },
                {
                    "id": "id.label.monsters",
                    "type": "label",
                    "data": {
                        "title": "Monsters config:",
                        "description": "Tip: multiline text. Every line is space separated and follows: tileID updateTimeMs direction1 direction2 ... directionN.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.monsters",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.monsters",
                        "placeholder": "101 500 left right\n202 250 up left right down",
                        "minLinesCount": 10
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["8"]
        },
        {
            "id": "8",
            "ordinal": 8,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 8: 🐣 Easter eggs?!",
                        "description": "<p>We're almost done! Now let's place the finishing touches on your level by adding optional <strong>garnitures</strong> to make your level feel more alive and complete.</p><p>This exercise is all about defining which tiles represent these special elements.</p><p>Garnitures are additional visual or thematic elements like grass, torches, banners, or any decorative details that don't affect gameplay, or do they?</p><p>There is a field below to complete:</p><ol><li><strong>Garniture Tile IDs</strong>: a \"new line\"-separated list of tile IDs with a boolean flag (<code>true</code> or <code>false</code>) displaying whether they should be collideable (e.g., <code>201 false<br>301 true</code>). The lines will be mapped to <code>G0</code>, <code>G1</code>, ..., <code>GN</code>.</li></ol><p>Once you've defined the garnitures config, you can place them directly into your maze layout.</p><p>Here's a peculiar example of how your layout might use them: you can use non-collideable garniture representing a wall tile to create a hidden passage to a secret room (but use distinguishable tile to help user to understand this is not a regular wall).</p><p>It polishes your game layout and sprinkles extra challenge for a player.</p><p>Ready to wrap up your level? Add your garnitures using the fields below, and update your layout to complete your masterpiece!</p><p>Below is the image with garniture tile IDs:</p><img src=\"@public/tiles-examples-garnitures.png\" width=\"350\"></img>"
                    }
                },
                {
                    "id": "id.label.garniture",
                    "type": "label",
                    "data": {
                        "title": "Garnitures config:",
                        "description": "Tip: multiline text. Every line is space separated pair of tileID and a boolean flag.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.garniture",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.garniture",
                        "placeholder": "101 true\n202 false\n203 false",
                        "minLinesCount": 5
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["9"]
        },
        {
            "id": "9",
            "ordinal": 9,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 9: Polishing level layout",
                        "description": "<p>Great work so far! Now let's give your <strong>flag</strong> a bit of extra flair by defining different <strong>appearances</strong>.</p><p>In this exercise, you'll provide a list of <strong>tile IDs</strong> that represent the different flags. These tiles will be automatically assigned as <code>F0</code>, <code>F1</code>, <code>F2</code>, and so on, in the exact same order you list them.</p><p>This allows your flag to have different appearance within the same level to make the layout harder to memorise and add some customisation to your design.</p><p><strong>Instructions:</strong></p><ul><li>Enter a comma-separated list of tile IDs (e.g., <code>120, 121, 122</code>).</li> <li>The first tile becomes <code>F0</code>, the second <code>F1</code>, and so on.</li></ul><p>Once assigned, you can reference <code>F0</code>, <code>F1</code>, etc. in your level layout.</p><p>Below is the image with flag tile IDs</p><img src=\"@public/tiles-examples-flags.png\" width=\"500\"></img><p>Time to make that flag wave proudly!</p>"
                    }
                },
                {
                    "id": "id.label.flags",
                    "type": "label",
                    "data": {
                        "title": "Flag tile IDs:",
                        "description": "Tip: comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.flags",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.flags",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Your level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0\nW0 .  W0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0 .  W0\nW0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0\nW0 .  W0 .  W0 .  .  .  .  .  .  .  .  .  .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 W0 W0 W0 .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  .  .  .  W0 .  W0 .  W0 .  W0\nW0 .  W0 .  W0 .  W0 .  W0 .  W0 W0 W0  W0 .  W0 .  W0 . W0\nW0 .  .  .  W0 .  W0 .  W0 .  .  .  .  .  .  W0 .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 .  W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["10"]
        },
        {
            "id": "10",
            "ordinal": 10,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 10: Level constraints",
                        "description": "<p>Now that your level is built and decorated, let's make it more challenging by defining the <strong>constraints and win conditions</strong>.</p><p>In this exercise, you'll configure how the level behaves in terms of time, movement, and scoring. These constraints help shape the difficulty and strategy of your level—forcing players to plan carefully, move efficiently, or collect more before they can win.</p><p>You can adjust the following values:</p><ol><li><strong>Max time (in seconds)</strong>: the total amount of time a player has to complete the level.</li><li><strong>Max moves</strong>: the maximum number of moves the player can make.</li><li><strong>Minimum score</strong>: the minimum score the player must collect before the flag appears in the level.</li></ol><p>Here's an example configuration:</p><pre> Max time: 60<br>Max steps: 200</pre><p>With this setup, the player has 60 seconds and 200 moves available to completel the level.</p><p>Ready to tweak your level's challenge? Enter your constraint values below and test how they change the gameplay experience!</p>"
                    }
                },
                {
                    "id": "id.label.max-time",
                    "type": "label",
                    "data": {
                        "title": "[Optional] Max time:",
                        "description": "Tip: a positive integer in seconds.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.max-time",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "constraint.time",
                        "placeholder": "100",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.max-moves",
                    "type": "label",
                    "data": {
                        "title": "[Optional] Max moves:",
                        "description": "Tip: a positive integer, defines how much moves a character can take before the game stops.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.max-moves",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "constraint.max-moves",
                        "placeholder": "50",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.min-score",
                    "type": "label",
                    "data": {
                        "title": "[Optional] Min score:",
                        "description": "Tip: a positive integer, defines when flag appears on the level.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.min-score",
                    "type": "sandbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "constraint.min-score",
                        "placeholder": "100",
                        "minLinesCount": 3
                    }
                }
            ],
            "shouldOpen": ["11"]
        },
        {
            "id": "11",
            "ordinal": 11,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 11: Special effects",
                        "description": "<p>You've built your level, added gameplay elements, and tuned its rules. Now it's time to give it a name and add some <strong>special effects</strong> to make it truly stand out!</p> <p>In this exercise, you'll set the <strong>title of your level</strong> and optionally apply <strong>post-processing effects</strong> that change how it looks and feels during gameplay.</p><p>There are three settings to configure:</p><ol><li><strong>Level title:</strong> enter a short, catchy name for your level. The title is displayed in the top right corner of the level.</li><li><strong>Cathode Ray Tube Effect:</strong> toggle this on to apply a subtle screen distortion and scan-line effect, similar to the look of an old CRT television. Great for retro vibes 📺</li><li><strong>Fog of War Effect:</strong> toggle this on to restrict player visibility, revealing only areas near the player's position. Perfect for sprinking more challenge.</li></ol><p>With this setup, your level will start with a dramatic, old-TV aesthetic and players will only see the immediate area around them—making exploration more intense</p>"
                    }
                },
                {
                    "id": "id.label.level-title",
                    "type": "label",
                    "data": {
                        "title": "Level title:",
                        "description": "Tip: a string of maximum 20 characters.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level-title",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.title",
                        "placeholder": "My very first level",
                        "minLinesCount": 2
                    }
                },
                {
                    "id": "id.checkbox.effect-cathode-ray",
                    "type": "checkbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "fx.cathode-ray-tube",
                        "title": "Apply Cathode Ray Tube Effect",
                        "description": "Simulates an old TV with a big belly 📺"
                    }
                },
                {
                    "id": "id.checkbox.effect-fog-of-war",
                    "type": "checkbox",
                    "data": {
                        "optional": true,
                        "persistencyId": "fx.fog-of-war",
                        "title": "Apply Fog of War Effect",
                        "description": "Restricts visibility to a really small area."
                    }
                }
            ],
            "shouldOpen": ["12"]
        },
        {
            "id": "12",
            "ordinal": 12,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 12: Reflect and Refine Your Game Mechanics",
                        "description": "<p>In the very first exercise, you identified several game mechanics that you wanted to improve or add to the game.</p><p>Now that you've built and customized your level, it's time to reflect on your work.</p> <p>Use the text box below to:</p><ul><li>Describe which game mechanics you originally identified as needing improvement or addition.</li><li>Explain how you implemented these mechanics throughout your level.</li><li>Compare your initial ideas with the final implementation. What changed, what worked well, and what could be improved further.</li></ul><p>This exercise helps you think critically about your design choices and learn from your creative process.</p>"
                    }
                },
                {
                    "id": "id.label.features",
                    "type": "label",
                    "data": {
                        "title": "Mechanics to add:",
                        "description": "Revisit mechanics you identified and see whether they are a good fit.",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.sandbox.features",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "temp.features",
                        "placeholder": "Spawn the character randomly at some pre-defined start point\nPlayer collects the coins\n…",
                        "minLinesCount": 5
                    }
                }
            ],
            "shouldOpen": ["13"]
        },
        {
            "id": "13",
            "ordinal": 13,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 13: Share Your Creation",
                        "description": "<p>You completed your level. It is time to let others experience it similar to professional game developers preparing their game for production!</p><p>In this exercise, you will download the <strong>game configuration file</strong> you created during the workshop and share it with another student sitting near you. This way, you can explore each other's work, exchange feedback, and get inspired by different design approaches.</p><p>Click the <strong>Download my config</strong> button to save your game configuration file to the disk. This file contains all of the settings, tiles, and level constraints you built so far.</p><p>Share the file with another student: either by sending it digitally (USB stick, chat app, etc.) or by swapping devices briefly (in case there is no way to share files).</p><p>Load their configuration into your editor using <string>Load someone's config</strong>.</p><p>Discuss the similarities and differences between your designs and give each other constructive feedback.</p>"
                    }
                },
                {
                    "id": "id.label.share",
                    "type": "label",
                    "data": {
                        "title": "Share your config:",
                        "description": "It is time to release your config to production. Use buttons below to download and upload config files.",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.config-uploader.share",
                    "type": "config-uploader",
                    "data": {
                        "downloadFilename": "demo-game-config"
                    }
                }
            ],
            "asset": "local-file",
            "shouldOpen": []
        },
        {
            "id": "demo-ri-monday",
            "ordinal": 100,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Monday Meeting Demo",
                        "description": "<p>Welcome to the Monday demo presented on <strong>21.07.25</strong></p><p>This demonstration showcases the full progression of potential exercises within the workshop experience. Students begin by exploring what makes up a video game its gameplay, mechanics, and end goals before diving into an analytical playthrough of a sample maze to identify existing rules and brainstorm new mechanics.</p><p>Next, they'll learn how to build their own custom level using data-driven design principles: configure wall layouts, define tile types, and bring their mazes to life.</p><p>Once a level is set, we'll implement mechanics like coins with varying point values, doors, and keys, then take on a design challenge to place those elements thoughtfully for an engaging gameplay experience.</p><p>From there, they'll explore simple AI concepts by imagining and prototyping monster behavior using text-based config files.</p><p>Finally, we'll spice things up with creative ideas—think secret levels, easter eggs, move limits, timers, and collectible challenges to make the game unique and fun.</p><p>This demo is a comprehensive journey through game design fundamentals using a hands-on, iterative approach. Have fun exploring and creating!</p><p>The levels included into this version are:<ol><li>Intro with basic mechanices</li><li>Gems</li><li>Doors</li><li>Monsters AI</li><li>Garniture: easter eggs</li><li>FX: Fog of War</li><li>Custom wall asset</li></ol><p>The game config can be found <a href=\"https://github.com/st235/RoyalInstitution.IntroductionToGameDevelopment.v4/blob/main/src/assets/game/demos/ri_monday_demo.json\" target=\"_blank\">here</a>.</p>"
                    }
                }
            ],
            "asset": "ri_monday_demo.json",
            "isHidden": true,
            "isOpenByDefault": true,
            "shouldOpen": []
        },
        {
            "id": "demo-local-config",
            "ordinal": 101,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Upload Your Own Config",
                        "description": "<p>Welcome to the tool allowing you to load custom game configs into the game.</p><p>This demonstrates the ability of the game to run custom config files and shows its outstanding flexibility.</p>"
                    }
                },
                {
                    "id": "id.label.demo-local-file",
                    "type": "label",
                    "data": {
                        "title": "Config uploader:",
                        "description": "Download saves a globally available game config, upload plays the config from disk.",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.config-uploader.demo-local-file",
                    "type": "config-uploader",
                    "data": {
                        "downloadFilename": "demo-game-config"
                    }
                }
            ],
            "asset": "local-file",
            "isHidden": true,
            "isOpenByDefault": true,
            "shouldOpen": []
        }
    ]
}
