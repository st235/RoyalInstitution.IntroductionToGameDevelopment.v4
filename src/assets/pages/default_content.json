{
    "defaultPageId": "1",
    "openByDefault": ["1"],
    "pages": [
        {
            "id": "1",
            "ordinal": 1,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 1: Learn and Play",
                        "description": "<p>Welcome to your very first activity!</p><p>Before we dive into creating anything, let's take a moment to explore how the game works. In this step, you will play <span class=\"highlight\">the Legend of Royal Institution</span> (a maze game) and observe how it behaves.</p><p>Put on your game designer hat and figure out how the game works. The following questions will help you to start:</p><ul><li>What are the rules of the maze?</li><li>How does the player move through it?</li><li>What marks the end of the game?</li></ul><p>Use the <strong>text boxes below</strong> to jot down any rules, patterns, or interesting game mechanics you notice.</p><p>As you explore the game, start thinking about how you could make it more interesting or challenging. What new <strong>game mechanics</strong> could you add? Think about how these elements could change the way the game is played and how they might make it more fun or challenging. Write down any ideas that come to mind!</p><p>Don't forget to click the <strong>Save</strong> button whenever you are ready to record your answer.</p><p>P.S.: There are no wrong answers! This is all about being curious and observant.</p><p>P.P.S.: After clicking the <strong>Save</strong> button the game will refresh.</p>"
                    }
                },
                {
                    "id": "id.label.rules",
                    "type": "label",
                    "data": {
                        "title": "Observed game behaviour:",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.sandbox.rules",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "temp.rules",
                        "placeholder": "Here are a few ideas for the game rules:\nThe character moves when user clicks a button\nGame starts with a dialog\n…",
                        "minLinesCount": 5
                    }
                },
                {
                    "id": "id.label.features",
                    "type": "label",
                    "data": {
                        "title": "Mechanics to add:",
                        "variant": "secondary"
                    }
                },
                {
                    "id": "id.sandbox.features",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "temp.features",
                        "placeholder": "Spawn the character randomly at some pre-defined start point\n…",
                        "minLinesCount": 5
                    }
                }
            ],
            "asset": "playthrough_demo.json",
            "shouldOpen": ["2"]
        },
        {
            "id": "2",
            "ordinal": 2,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 2: Kicking off the plot!",
                        "description": "<p>Great job exploring the game! Now, let's move on to your next activity. This time, you're stepping into the role of a <span class=\"highlight\">narrative designer</span>.</p> <p>In this step, you'll get a chance to change the <strong>dialogues</strong> that appear in three important moments of the game:</p><ul><li><strong>Game Intro</strong>: the message players see when before the gameplay begins.</li><li><strong>Game Over</strong>: a message that is shown to the player fails to complete a level.</li> <li><strong>Victory</strong>: the celebratory message when the player finishes the maze!</li></ul><p>Take a few moments to play the maze game again and pay close attention to the text that appears during these scenarios. Then, think about how you would change it to justify the gameplay.</p><p>Do you want to make it more dramatic, silly, mysterious, or even motivational? Use the <strong>text boxes below</strong> to rewrite each of the three dialogues in your own style. Be creative and have fun with it!</p> <p>Once you're happy with your new dialogues, click <strong>Save</strong> to see how the game changes.</p>"
                    }
                },
                {
                    "id": "id.label.intro",
                    "type": "label",
                    "data": {
                        "title": "\"Game Intro\" message:",
                        "description": "Tip: max 7 lines",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.intro",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "dialog.intro",
                        "placeholder": "I am a template message,\nI am required to setup the gameplay",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.gameOver",
                    "type": "label",
                    "data": {
                        "title": "\"Game Over\" message:",
                        "description": "Tip: max 7 lines",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.gameOver",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "dialog.game-over",
                        "placeholder": "Haha!\nI knew it would be hard\nto finish the maze!",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.victory",
                    "type": "label",
                    "data": {
                        "title": "\"Victory\" message:",
                        "description": "Tip: max 7 lines",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.victory",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "dialog.victory",
                        "placeholder": "Congratulations!\nWell done.",
                        "minLinesCount": 3
                    }
                }
            ],
            "shouldOpen": ["3"]
        },
        {
            "id": "3",
            "ordinal": 3,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 3: Designing your first level layout",
                        "description": "<p>Time to put your design skills to work.</p><p>In this exercise, you'll be designing your very first custom maze layout.</p><p>Your maze should be <strong>30 tiles wide</strong> and <strong>15 tiles high</strong>, but don't worry if it is bigger or smaller than <strong>30x15</strong> the layout will be expanded or cropped depending on the provided size.</p><p>You should use the next symbols to build a successful layout:<ul><li><code>W0</code> to represent walls</li><li><code>.</code> (a dot) to represent empty spaces that the player can walk through</li><li><code>SP</code> starting point. You can place a few of them around the maze, then the random will be chosen.</li><li><code>F0</code> for the finish point. You can also have a few of them in your layout.</li></ul></p><p>Focus on building a clear, playable layout. Think about where the player might start, where they could go, and how the maze flows.</p><p>Treat it like the skeleton of your level!</p><p>Once you're happy with your layout, click the <strong>Save</strong> button to record your design.</p><p>P.S.: If your game is stuck at some point, just refresh the page. Don't worry all saved data will be restored.</p>"
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["4"]
        },
        {
            "id": "4",
            "ordinal": 4,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 4: Improving the visual appearance",
                        "description": "<p>Now that your level structure is in place, it's time to enhance its visual appearance using custom tile mapping.</p><p>In this exercise, you'll define how each tile should look by providing a list of <strong>tile IDs</strong> (ordinal values) that will be mapped to specific tile types in your maze.</p><p>Each tile ID you enter will be automatically assigned to a corresponding tile code: the first value becomes <code>W0</code>, the second <code>W1</code>, and so on—up to <code>WN</code>, where <strong>N</strong> is the index of the last value you provide.</p><p>Enter your tile IDs in the text box below, separated by commas (e.g., <code>17, 21, 34, 56</code>). These values will control how each wall tile appears in the final rendered game.</p><p>You can be creative here! Think of these tile IDs as different styles or textures: cracked stone, mossy brick, or a broken piece of wall. Just be sure to keep the order consistent with how you'll use <code>W0</code>, <code>W1</code>, etc., in your maze layout.</p><p>Once you've added your tile mapping, click the <strong>Save</strong> button to apply your changes.</p><p>Below is an image to help you identify tiles in your game.</p><img src=\"@public/tiles-examples-walls.png\" width=\"500\"></img>"
                    }
                },
                {
                    "id": "id.label.walls",
                    "type": "label",
                    "data": {
                        "title": "Walls variants:",
                        "description": "Tip: comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.walls",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.walls",
                        "placeholder": "340, 212",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["5"]
        },
        {
            "id": "5",
            "ordinal": 5,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 5: Adding coins",
                        "description": "<p>Now it's time to populate the maze with collectible <strong>coins</strong> to make gameplay more rewarding.</p><p>In this exercise, you'll define the coin tiles that players can collect by providing a list of <strong>tile IDs</strong> (ordinal values) and optionally assigning them different scores. Each coin tile ID will be mapped to a code starting from <code>C0</code>, <code>C1</code>, and so on—up to <code>CN</code>, where <strong>N</strong> is the index of the last coin you define (similar to what you already achieved with the walls config).</p><p>There are three parts to this setup:</p><ol><li><strong>Default Coin Score:</strong> a positive number that is used as the score for any coin tile that doesn't have a custom score assigned.</li> <li><strong>Scores List</strong> a list of specific scores assigned to every coin. Each line should be in the format <code>X Y</code>, where <code>X</code> is the coin code (a number in <code>C0</code>, <code>C1</code>, ... <code>CN</code>), and <code>Y</code> is the score. Example: <pre>0 5</pre><pre>2 10</pre></li><li><strong>Coin Tile IDs list</strong> a list of tile IDs (e.g., <code>12, 23, 45</code>) that will be used for coins. These values correspond to the tiles shown in the image below and will be mapped to <code>C0</code>, <code>C1</code>, etc.</li></ol><p>Once you've defined your coins and scores, you'll be able to place them directly into your maze layout using the <code>CX</code> codes.</p><p>Below is an image to help you select the coin tile IDs:</p><img src=\"@public/tiles-examples-gems.png\" width=\"500\" /><p>Add your coins using the fields below, and then update your maze layout accordingly. Have fun designing your collectible paths!</p>"
                    }
                },
                {
                    "id": "id.label.coins.default-score",
                    "type": "label",
                    "data": {
                        "title": "Default score:",
                        "description": "Tip: a single positive number",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.coins.default-score",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.coins.default-score",
                        "placeholder": "50",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.coins.values",
                    "type": "label",
                    "data": {
                        "title": "Values:",
                        "description": "Tip: a list of pairs separated by a new line. Every pair consists of coin id and score separated by space.",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.coins.values",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.coins.values",
                        "placeholder": "0 10\n1 20\n…",
                        "minLinesCount": 10
                    }
                },
                {
                    "id": "id.label.coins.tiles",
                    "type": "label",
                    "data": {
                        "title": "Coin tiles:",
                        "description": "Tip: comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.coins.tiles",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.coins.tiles",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["6"]
        },
        {
            "id": "6",
            "ordinal": 6,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 6: dynamic maze layout",
                        "description": "<p>Now let's turn around our core game mechanic: make the layout dynamic by introducing <strong>keys and doors</strong>. This feature adds challenge and progression to your level by requiring players to collect specific keys to unlock matching doors.</p><p>In this exercise, you'll define which tile IDs represent <strong>keys</strong>, <strong>doors</strong>, and optionally, the <strong>closed versions of doors</strong>. Each key and door pair will be mapped with a unique code: <code>K0</code>/<code>D0</code>, <code>K1</code>/<code>D1</code>, and so on.</p> <p>Here's how to set it up:</p><ol><li><strong>Keys:</strong> enter the tile IDs for all the keys in your level (e.g., <code>14, 33, 47</code>). Similar to what we worked with before: the first ID becomes <code>K0</code>, the second <code>K1</code>, and so on.</li><li><strong>Doors:</strong> the corresponding tile IDs for doors (e.g., <code>28, 39, 52</code>). These will be assigned as <code>D0</code>, <code>D1</code>, etc. There must be exactly one door tile per key tile.</li> <li><strong>Open Door Tile IDs:</strong> a list of tiles to use for unblocked doors. Character can travel through the open doors. If you only provide one value, all doors will use that tile. If you provide more than one, the number of open door tiles must exactly match the number of doors (aka closed doors) and be listed in the same order.</li></ol><p>Once you've defined your keys and doors, you can use <code>K0</code>, <code>K1</code>, ... and <code>D0</code>, <code>D1</code>, ... directly in your maze layout to place them where needed.</p><p>These images will help you identify the correct tile IDs for keys and doors:</p> <p><strong>Key Tile IDs:</strong></p><img src=\"@public/tiles-examples-keys.png\" width=\"500\" /><p><strong>Door Tile IDs:</strong></p> <img src=\"@public/tiles-examples-doors.png\" width=\"500\" /><p>Once you're ready, fill in the fields below and place your keys and doors into the level layout. This will make your maze more interactive and strategic!</p>"
                    }
                },
                {
                    "id": "id.label.keys",
                    "type": "label",
                    "data": {
                        "title": "Key tiles:",
                        "description": "Tip: comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.keys",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.keys",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.doors.close",
                    "type": "label",
                    "data": {
                        "title": "Close door tiles:",
                        "description": "Tip: comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.doors.close",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.doors.close",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.doors.open",
                    "type": "label",
                    "data": {
                        "title": "Open door tiles:",
                        "description": "Tip: a single number or comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.doors.open",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.doors.open",
                        "placeholder": "101",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["7"]
        },
        {
            "id": "7",
            "ordinal": 7,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 7: adding monsters",
                        "description": "<p>It's time to bring your level to life with some <strong>monster logic</strong>! In this exercise, you'll define how monsters behave by specifying their spawn points, movement patterns, and update timing.</p><p>You'll provide your monster configurations using a text field below. Each line represents one monster and follows this exact format:</p><pre>tileId updateTimeMs direction1 direction2 ... directionN</pre><p>Here's what each part means:</p><ul><li><li><strong>tileId</strong> the tile ID used to visually represent the monster.</li><li><strong>updateTimeMs</strong> the time (in milliseconds) between each movement of your creature. For example, <code>500</code> means the monster updates its position twice in a second (every half second).</li><li><strong>directions</strong> a sequence of movement directions the monster will follow in order. Valid directions are: <code>left</code>, <code>right</code>, <code>up</code>, <code>down</code>.<strong>Directions list should move the monster in a way that it starts and finishes in the exactly same point.</strong></li></ul><p>The first monster becomes <code>M0</code>, the second <code>M1</code>, and so on.</p> <p>See an example:</p> <pre>27 1000 right down down up up left<br>33 500 left left right right</pre><p>In this example: <ul><li><code>M0</code> uses tile ID 27, updates every 1000ms, and moves in a knight (chess figure) pattern.</li><li><code>M1</code> uses tile ID 33, updates every 500ms, and moves two steps left and then back right, repeating that pattern.</li></ul></p> <p>Once defined, you can place monsters in your maze using <code>M0</code>, <code>M1</code>, etc., just like other entities.</p> <p>This logic lets you create patrol patterns, chase paths, or timed threats. Get creative with how you design their movement!</p><img src=\"@public/tiles-examples-creatures.png\" width=\"600\"></img>"
                    }
                },
                {
                    "id": "id.label.monsters",
                    "type": "label",
                    "data": {
                        "title": "Monsters config:",
                        "description": "Tip: multiline text. Every line is space separated and follows: tileId updateTimeMs direction1 direction2 ... directionN",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.monsters",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.monsters",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 10
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["8"]
        },
        {
            "id": "8",
            "ordinal": 8,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 8: 🐣 easter eggs?",
                        "description": "<p>We're almost done! Now let's place the finishing touches on your level by adding optional <strong>garnitures</strong> to make your level feel more alive and complete.</p><p>This exercise is all about defining which tiles represent these special elements.</p> <p>There is a field below to complete:</p><ol><li><strong>Garniture Tile IDs</strong> enter a new line-separated list of tile IDs with a flag whether they should be collideable (e.g., <code>201 false<br>301 true</code>) that represent optional garniture tiles—visual or thematic elements like grass, torches, banners, or any decorative details that don't affect gameplay, do they? These will be mapped to <code>G0</code>, <code>G1</code>, ..., <code>GN</code>.</li></ol><p>Once you've defined these, you can place the garnitures directly into your maze layout.</p><p>Here's an example of how your layout might use them: you can use non-collideable garniture and a wall tile to create a hidden passage to a secret room.</p><p>This will create a visually interesting finish area for extra challenging the player!</p><p>Ready to wrap up your level? Add your garnitures using the fields below, and update your layout to complete your masterpiece!</p><p>Below are garniture tiles:</p><img src=\"@public/tiles-examples-garnitures.png\" width=\"350\"></img>"
                    }
                },
                {
                    "id": "id.label.garniture",
                    "type": "label",
                    "data": {
                        "title": "Garnitures:",
                        "description": "Tip: multiline text. Every line is space separated pair of tileID and a boolean flag",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.garniture",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.garniture",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 5
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["9"]
        },
        {
            "id": "9",
            "ordinal": 9,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 9: polishing level layout",
                        "description": "<p>Great work so far! Now let's give your <strong>flag</strong> a bit of extra flair by defining different <strong>appearances</strong>.</p><p>In this exercise, you'll provide a list of <strong>tile IDs</strong> that represent the different flags. These tiles will be automatically assigned as <code>F0</code>, <code>F1</code>, <code>F2</code>, and so on, in the order you list them.</p> <p>This allows your flag to have different appearance within the same level to make the layout harder to memorise and add some customisation to your design.</p><p><strong>Instructions:</strong></p><ul><li>Enter a comma-separated list of tile IDs (e.g., <code>120, 121, 122</code>).</li> <li>The first tile becomes <code>F0</code>, the second <code>F1</code>, and so on.</li></ul><p>Once assigned, you can reference <code>F0</code>, <code>F1</code>, etc. in your level layout.</p><img src=\"@public/tiles-examples-flags.png\" width=\"500\"></img><p>Time to make that flag wave proudly!</p>"
                    }
                },
                {
                    "id": "id.label.flags",
                    "type": "label",
                    "data": {
                        "title": "Flag tiles:",
                        "description": "Tip: comma-separated list of numbers",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.flags",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "config.flags",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.level",
                    "type": "label",
                    "data": {
                        "title": "Level layout:",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.layout",
                        "placeholder": "W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0\nW0 SP .  .  .  .  .  .  .  .  .  .  .  W0 SP .  .  .  .  .  .  .  .  .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0\nW0 W0 W0 .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  .  W0 W0 .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 W0 W0 .  W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 .  W0\nW0 .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  W0 .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 W0 .  W0 W0 W0 W0 W0 .  W0 W0 W0\nW0 .  .  .  .  .  .  .  W0 .  .  .  .  .  W0 .  .  .  .  .  .  .  W0 .  .  .  .  .  .  W0\nW0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0 W0",
                        "minLinesCount": 18
                    }
                }
            ],
            "shouldOpen": ["10"]
        },
        {
            "id": "10",
            "ordinal": 10,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 10: level constraints",
                        "description": "<p>Now that your level is built and decorated, let's make it more challenging by defining the <strong>constraints and win conditions</strong>.</p><p>In this exercise, you'll configure how the level behaves in terms of time, movement, and scoring. These constraints help shape the difficulty and strategy of your level—forcing players to plan carefully, move efficiently, or collect more before they can win.</p><p>You can adjust the following values:</p><ol><li><strong>Max time (in seconds)</strong> the total amount of time a player has to complete the level.</li><li><strong>Max moves</strong> the maximum number of moves the player can make.</li><li><strong>Minimum score</strong> the minimum score the player must collect before the flag appears in the level.</li></ol><p>Set an empty field and save to remove the constraint.</p><p>Here's an example configuration:</p> <pre> Max time: 60<br>Max steps: 200</pre><p>With this setup, the player has 60 seconds and 200 moves availableto completel the level.</p> <p>Ready to tweak your level's challenge? Enter your constraint values below and test how they change the gameplay experience!</p>"
                    }
                },
                {
                    "id": "id.label.max-time",
                    "type": "label",
                    "data": {
                        "title": "Max time:",
                        "description": "Tip: a positive integer in seconds",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.max-time",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "constraint.time",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.max-moves",
                    "type": "label",
                    "data": {
                        "title": "Max moves:",
                        "description": "Tip: a positive integer",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.max-moves",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "constraint.max-moves",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                },
                {
                    "id": "id.label.min-score",
                    "type": "label",
                    "data": {
                        "title": "Min score:",
                        "description": "Tip: a positive integer, defines when flag appears on the level",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.min-score",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "constraint.min-score",
                        "placeholder": "101, 202, 303, 404",
                        "minLinesCount": 3
                    }
                }
            ],
            "shouldOpen": ["11"]
        },
        {
            "id": "11",
            "ordinal": 11,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Exercise 11: special effects",
                        "description": "<p>You've built your level, added gameplay elements, and tuned its rules. Now it's time to give it a name and add some <strong>special effects</strong> to make it truly stand out!</p> <p>In this exercise, you'll set the <strong>title of your level</strong> and optionally apply <strong>post-processing effects</strong> that change how it looks and feels during gameplay.</p><p>There are three settings to configure:</p><ol><li><strong>Level title:</strong> enter a short, catchy name for your level. This will in the top right corner of the level.</li><li><strong>Cathode Ray Tube Effect:</strong> toggle this on to apply a subtle screen distortion and scan-line effect, similar to the look of an old CRT television. Great for retro vibes 📺</li> <li><strong>Fog of War Effect:</strong> toggle this on to restrict player visibility, revealing only areas near the player's position. Perfect for sprinking more challenge.</li></ol><p>With this setup, your level will start with a dramatic, old-TV aesthetic and players will only see the immediate area around them—making exploration more intense</p>"
                    }
                },
                {
                    "id": "id.label.level-title",
                    "type": "label",
                    "data": {
                        "title": "Level title:",
                        "description": "Tip: a string of maximum 20 characters",
                        "variant": "caption"
                    }
                },
                {
                    "id": "id.sandbox.level-title",
                    "type": "sandbox",
                    "data": {
                        "persistencyId": "level.title",
                        "placeholder": "My very first level",
                        "minLinesCount": 2
                    }
                },
                {
                    "id": "id.checkbox.effect-cathode-ray",
                    "type": "checkbox",
                    "data": {
                        "persistencyId": "fx.cathode-ray-tube",
                        "title": "Apply Cathode Ray Tube Effect",
                        "description": "Simulates an old tv with a big belly"
                    }
                },
                {
                    "id": "id.checkbox.effect-fog-of-war",
                    "type": "checkbox",
                    "data": {
                        "persistencyId": "fx.fog-of-war",
                        "title": "Apply Fog of War Effect",
                        "description": "Restricts visibility to a really small area"
                    }
                }
            ],
            "shouldOpen": []
        },
        {
            "id": "demo-ri-monday",
            "ordinal": 100,
            "components": [
                {
                    "id": "id.infocard",
                    "type": "info-card",
                    "data": {
                        "title": "Monday Meeting Demo",
                        "description": "<p>Welcome to the Monday demo presented on <strong>21.07.25</strong></p><p>This demonstration showcases the full progression of potential exercises within the workshop experience. Students begin by exploring what makes up a video game its gameplay, mechanics, and end goals before diving into an analytical playthrough of a sample maze to identify existing rules and brainstorm new mechanics.</p><p>Next, they'll learn how to build their own custom level using data-driven design principles: configure wall layouts, define tile types, and bring their mazes to life.</p><p>Once a level is set, we'll implement mechanics like coins with varying point values, doors, and keys, then take on a design challenge to place those elements thoughtfully for an engaging gameplay experience.</p><p>From there, they'll explore simple AI concepts by imagining and prototyping monster behavior using text-based config files.</p><p>Finally, we'll spice things up with creative ideas—think secret levels, easter eggs, move limits, timers, and collectible challenges to make the game unique and fun.</p><p>This demo is a comprehensive journey through game design fundamentals using a hands-on, iterative approach. Have fun exploring and creating!</p><p>The levels included into this version are:<ol><li>Intro with basic mechanices</li><li>Gems</li><li>Doors</li><li>Monsters AI</li><li>Garniture: easter eggs</li><li>FX: Fog of War</li><li>Custom wall asset</li></ol><p>The game config can be found <a href=\"https://github.com/st235/RoyalInstitution.IntroductionToGameDevelopment.v4/blob/main/src/assets/game/demos/ri_monday_demo.json\" target=\"_blank\">here</a>.</p>"
                    }
                }
            ],
            "asset": "ri_monday_demo.json",
            "isHidden": true,
            "isOpenByDefault": true,
            "shouldOpen": []
        }
    ]
}
